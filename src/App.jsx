import React, { useState, useRef, useEffect } from 'react';
import { Send, User, Bot, Trash2, Mail, FileSpreadsheet, Database, FileText, Zap } from 'lucide-react';

const AIAgentSystem = () => {
  const [currentAdmin, setCurrentAdmin] = useState('Ryan');
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const messagesEndRef = useRef(null);

  const admins = ['Ryan', 'Tim', 'Jeevan', 'Vishwa', 'Jason', 'Myrna', 'Julie'];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Sample data storage
  const [emailDrafts, setEmailDrafts] = useState([]);
  const [sheetData, setSheetData] = useState([
    { id: 1, name: 'Project Alpha', status: 'Active', budget: 50000 },
    { id: 2, name: 'Project Beta', status: 'Pending', budget: 75000 },
    { id: 3, name: 'Project Gamma', status: 'Completed', budget: 60000 }
  ]);
  const [apiData, setApiData] = useState([
    { id: 1, endpoint: '/users', method: 'GET', status: 'active' },
    { id: 2, endpoint: '/products', method: 'POST', status: 'active' }
  ]);

  const processCommand = (command) => {
    const lowerCommand = command.toLowerCase();

    // Email Draft Creation
    if (lowerCommand.includes('create email') || lowerCommand.includes('draft email') || lowerCommand.includes('compose email')) {
      const to = lowerCommand.match(/to ([a-z@.\s]+)/i)?.[1] || 'recipient@example.com';
      const subject = lowerCommand.match(/subject ([^.]+)/i)?.[1] || 'Important Update';
      const draft = {
        id: Date.now(),
        to: to.trim(),
        subject: subject.trim(),
        body: `Draft created by ${currentAdmin}`,
        createdBy: currentAdmin,
        timestamp: new Date().toLocaleString()
      };
      setEmailDrafts(prev => [...prev, draft]);
      return {
        type: 'success',
        message: `✅ Email draft created!\n\n**To:** ${draft.to}\n**Subject:** ${draft.subject}\n**Created by:** ${currentAdmin}\n\nDraft saved to outbox.`
      };
    }

    // Fetch Google Sheet Data
    if (lowerCommand.includes('fetch') && (lowerCommand.includes('sheet') || lowerCommand.includes('data') || lowerCommand.includes('google'))) {
      const dataTable = sheetData.map(row => 
        `• ${row.name} - Status: ${row.status} - Budget: $${row.budget.toLocaleString()}`
      ).join('\n');
      return {
        type: 'success',
        message: `📊 **Data Retrieved from Google Sheet:**\n\n${dataTable}\n\n*Total Projects: ${sheetData.length}*`
      };
    }

    // GET Command
    if (lowerCommand.startsWith('get ') || lowerCommand.includes('retrieve')) {
      const resource = lowerCommand.includes('user') ? 'users' : lowerCommand.includes('product') ? 'products' : 'data';
      return {
        type: 'success',
        message: `🔍 **GET Request Successful**\n\nEndpoint: /api/${resource}\nStatus: 200 OK\n\nSample Response:\n\`\`\`json\n{\n  "id": 1,\n  "name": "Sample ${resource}",\n  "status": "active"\n}\n\`\`\``
      };
    }

    // POST Command
    if (lowerCommand.startsWith('post ') || lowerCommand.includes('create new') || lowerCommand.includes('add new')) {
      const resource = lowerCommand.includes('user') ? 'user' : lowerCommand.includes('product') ? 'product' : 'record';
      return {
        type: 'success',
        message: `✨ **POST Request Successful**\n\nNew ${resource} created!\nEndpoint: /api/${resource}s\nStatus: 201 Created\n\nCreated by: ${currentAdmin}`
      };
    }

    // DELETE Command
    if (lowerCommand.includes('delete') || lowerCommand.includes('remove')) {
      const resource = lowerCommand.match(/delete (\w+)/i)?.[1] || 'record';
      return {
        type: 'success',
        message: `🗑️ **DELETE Request Successful**\n\nResource deleted: ${resource}\nStatus: 204 No Content\n\nDeleted by: ${currentAdmin}`
      };
    }

    // Create Summary
    if (lowerCommand.includes('summary') || lowerCommand.includes('summarize') || lowerCommand.includes('report')) {
      return {
        type: 'success',
        message: `📝 **Executive Summary Generated**\n\n**Project Overview:**\n• Active Projects: ${sheetData.filter(p => p.status === 'Active').length}\n• Total Budget: $${sheetData.reduce((sum, p) => sum + p.budget, 0).toLocaleString()}\n• Pending Items: ${sheetData.filter(p => p.status === 'Pending').length}\n\n**Recommendations:**\n✓ Monitor Budget Alpha project closely\n✓ Expedite Beta project approval\n✓ Archive completed projects\n\n*Generated by ${currentAdmin} on ${new Date().toLocaleDateString()}*`
      };
    }

    // Analytics Command
    if (lowerCommand.includes('analytic') || lowerCommand.includes('stats') || lowerCommand.includes('metrics')) {
      return {
        type: 'success',
        message: `📈 **Analytics Dashboard**\n\n**System Metrics:**\n• Total API Calls Today: 1,247\n• Email Drafts: ${emailDrafts.length}\n• Active Endpoints: ${apiData.length}\n• Success Rate: 98.5%\n\n**Top Admin Activity:**\n1. ${currentAdmin} - 45 actions\n2. Team Average - 32 actions`
      };
    }

    // Schedule Command
    if (lowerCommand.includes('schedule') || lowerCommand.includes('reminder') || lowerCommand.includes('meeting')) {
      const time = lowerCommand.match(/at (\d+:\d+|\d+ [ap]m)/i)?.[1] || '2:00 PM';
      return {
        type: 'success',
        message: `📅 **Event Scheduled**\n\nTime: ${time}\nOrganizer: ${currentAdmin}\nStatus: Confirmed\n\n✅ Calendar invite sent to all participants`
      };
    }

    // File Operations
    if (lowerCommand.includes('upload') || lowerCommand.includes('file') || lowerCommand.includes('document')) {
      return {
        type: 'success',
        message: `📁 **File Operation Completed**\n\nAction: Document processed\nType: PDF/DOCX\nSize: 2.4 MB\nUploaded by: ${currentAdmin}\n\n✅ File stored securely`
      };
    }

    // Notification Command
    if (lowerCommand.includes('notify') || lowerCommand.includes('alert') || lowerCommand.includes('send notification')) {
      return {
        type: 'success',
        message: `🔔 **Notification Sent**\n\nRecipients: All Admins\nPriority: High\nSent by: ${currentAdmin}\n\n✅ 7 notifications delivered successfully`
      };
    }

    // Help Command
    if (lowerCommand.includes('help') || lowerCommand === 'what can you do') {
      return {
        type: 'info',
        message: `🤖 **AI Agent Capabilities**\n\n**Available Commands:**\n• "Create email to [email] subject [topic]"\n• "Fetch sheet data" or "Get Google Sheet info"\n• "GET users/products"\n• "POST new user/product"\n• "DELETE record"\n• "Create summary" or "Generate report"\n• "Show analytics"\n• "Schedule meeting at [time]"\n• "Upload document"\n• "Notify all admins"\n\n*Just type naturally - I understand context!*`
      };
    }

    // Default response
    return {
      type: 'info',
      message: `I received your command: "${command}"\n\nI can help with:\n✉️ Email drafts\n📊 Google Sheets data\n🔄 API operations (GET/POST/DELETE)\n📝 Summaries & reports\n📈 Analytics\n\nTry: "Create email", "Fetch data", "Generate summary", or "Help"`
    };
  };

  const handleSend = () => {
    if (!input.trim()) return;

    const userMessage = {
      id: Date.now(),
      type: 'user',
      content: input,
      admin: currentAdmin,
      timestamp: new Date().toLocaleTimeString()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsProcessing(true);

    setTimeout(() => {
      const response = processCommand(input);
      const botMessage = {
        id: Date.now() + 1,
        type: 'bot',
        content: response.message,
        responseType: response.type,
        timestamp: new Date().toLocaleTimeString()
      };
      setMessages(prev => [...prev, botMessage]);
      setIsProcessing(false);
    }, 800);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-t-2xl shadow-lg p-6 border-b-2 border-indigo-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="bg-indigo-600 p-3 rounded-xl">
                <Bot className="w-8 h-8 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-800">AI Admin Agent</h1>
                <p className="text-sm text-gray-600">Natural Language Command System</p>
              </div>
            </div>
            <div className="flex items-center gap-4">
              <select 
                value={currentAdmin}
                onChange={(e) => setCurrentAdmin(e.target.value)}
                className="px-4 py-2 border-2 border-indigo-300 rounded-lg font-semibold text-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              >
                {admins.map(admin => (
                  <option key={admin} value={admin}>👤 {admin}</option>
                ))}
              </select>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="bg-white px-6 py-4 border-b border-gray-200">
          <div className="flex gap-2 flex-wrap">
            <button onClick={() => setInput('Create email to team@company.com subject Weekly Update')} className="px-3 py-1.5 bg-blue-100 text-blue-700 rounded-lg text-sm font-medium hover:bg-blue-200 flex items-center gap-1">
              <Mail className="w-4 h-4" /> Email Draft
            </button>
            <button onClick={() => setInput('Fetch Google Sheet data')} className="px-3 py-1.5 bg-green-100 text-green-700 rounded-lg text-sm font-medium hover:bg-green-200 flex items-center gap-1">
              <FileSpreadsheet className="w-4 h-4" /> Get Sheet Data
            </button>
            <button onClick={() => setInput('Generate summary for submission')} className="px-3 py-1.5 bg-purple-100 text-purple-700 rounded-lg text-sm font-medium hover:bg-purple-200 flex items-center gap-1">
              <FileText className="w-4 h-4" /> Create Summary
            </button>
            <button onClick={() => setInput('Show analytics and metrics')} className="px-3 py-1.5 bg-orange-100 text-orange-700 rounded-lg text-sm font-medium hover:bg-orange-200 flex items-center gap-1">
              <Zap className="w-4 h-4" /> Analytics
            </button>
            <button onClick={() => setInput('POST new user record')} className="px-3 py-1.5 bg-teal-100 text-teal-700 rounded-lg text-sm font-medium hover:bg-teal-200 flex items-center gap-1">
              <Database className="w-4 h-4" /> API Post
            </button>
          </div>
        </div>

        {/* Chat Area */}
        <div className="bg-white shadow-lg h-96 overflow-y-auto p-6">
          {messages.length === 0 && (
            <div className="text-center text-gray-500 mt-20">
              <Bot className="w-16 h-16 mx-auto mb-4 text-indigo-300" />
              <p className="text-lg font-semibold">Welcome, {currentAdmin}!</p>
              <p className="text-sm mt-2">Start typing a command or click a quick action above</p>
            </div>
          )}
          
          {messages.map(msg => (
            <div key={msg.id} className={`mb-4 flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`flex gap-3 max-w-3xl ${msg.type === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${msg.type === 'user' ? 'bg-indigo-600' : 'bg-gray-300'}`}>
                  {msg.type === 'user' ? <User className="w-5 h-5 text-white" /> : <Bot className="w-5 h-5 text-gray-700" />}
                </div>
                <div className={`rounded-2xl p-4 ${msg.type === 'user' ? 'bg-indigo-600 text-white' : 'bg-gray-100 text-gray-800'}`}>
                  {msg.type === 'user' && <div className="text-xs opacity-80 mb-1">{msg.admin}</div>}
                  <div className="whitespace-pre-wrap text-sm leading-relaxed">{msg.content}</div>
                  <div className="text-xs opacity-70 mt-2">{msg.timestamp}</div>
                </div>
              </div>
            </div>
          ))}
          
          {isProcessing && (
            <div className="flex gap-3 mb-4">
              <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gray-300 flex items-center justify-center">
                <Bot className="w-5 h-5 text-gray-700" />
              </div>
              <div className="bg-gray-100 rounded-2xl p-4">
                <div className="flex gap-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Input Area */}
        <div className="bg-white rounded-b-2xl shadow-lg p-6">
          <div className="flex gap-3">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Type your command in natural language..."
              className="flex-1 px-4 py-3 border-2 border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
            />
            <button
              onClick={handleSend}
              disabled={!input.trim() || isProcessing}
              className="px-6 py-3 bg-indigo-600 text-white rounded-xl font-semibold hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center gap-2 transition-colors"
            >
              <Send className="w-5 h-5" />
              Send
            </button>
          </div>
          <p className="text-xs text-gray-500 mt-2">Try: "Create email", "Get sheet data", "Generate summary", "POST new record", "DELETE user", or "Help"</p>
        </div>

        {/* Stats Footer */}
        <div className="mt-4 grid grid-cols-4 gap-4">
          <div className="bg-white rounded-xl p-4 shadow text-center">
            <Mail className="w-6 h-6 mx-auto mb-2 text-blue-600" />
            <div className="text-2xl font-bold text-gray-800">{emailDrafts.length}</div>
            <div className="text-xs text-gray-600">Email Drafts</div>
          </div>
          <div className="bg-white rounded-xl p-4 shadow text-center">
            <FileSpreadsheet className="w-6 h-6 mx-auto mb-2 text-green-600" />
            <div className="text-2xl font-bold text-gray-800">{sheetData.length}</div>
            <div className="text-xs text-gray-600">Sheet Records</div>
          </div>
          <div className="bg-white rounded-xl p-4 shadow text-center">
            <Database className="w-6 h-6 mx-auto mb-2 text-purple-600" />
            <div className="text-2xl font-bold text-gray-800">{apiData.length}</div>
            <div className="text-xs text-gray-600">API Endpoints</div>
          </div>
          <div className="bg-white rounded-xl p-4 shadow text-center">
            <Zap className="w-6 h-6 mx-auto mb-2 text-orange-600" />
            <div className="text-2xl font-bold text-gray-800">{messages.length}</div>
            <div className="text-xs text-gray-600">Commands Run</div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AIAgentSystem;